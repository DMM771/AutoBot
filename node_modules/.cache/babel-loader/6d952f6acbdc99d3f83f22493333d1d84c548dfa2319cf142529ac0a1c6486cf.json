{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05D5\\u05E8\\u05D0\\u05DC \\u05DE\\u05E9\\u05E2\\u05DF\\\\Desktop\\\\\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD\\\\chatbot\\\\chat-bot\\\\src\\\\ChatInput.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport { useRef, useState } from \"react\";\nimport RecordModal from \"./RecordModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isLegalFile(fileType) {\n  let parts = fileType.split('/');\n  return parts[parts.length - 2] === \"video\" || parts[parts.length - 2] === \"image\";\n}\nfunction isVideo(fileName) {\n  let parts = fileName.split('/');\n  return parts[parts.length - 2] === \"video\";\n}\n\n// function updateContact(contact, newMessage, username) {\n//     let index = registeredUsers.findIndex((i) => (i.username === username));\n//     let contactIndex = registeredUsers[index].data.findIndex((i) => (i.contactName === contact.contactName));\n//     registeredUsers[index].data[contactIndex].lastMessageTime = new Date().toLocaleString();\n//     registeredUsers[index].data[contactIndex].lastMessage = newMessage;\n// }\n\nfunction ChatInput(_ref) {\n  _s();\n  let {\n    contact,\n    setListMessages,\n    username\n  } = _ref;\n  const fileInput = useRef(null);\n  const textInput = useRef(null);\n  const [openModel, setOpenModel] = useState(false);\n  async function sendToServer(add) {\n    const params = {\n      content: add\n    };\n    await fetch(\"http://localhost:5108/api/contacts/\" + contact.id + \"/messages?username=\" + username, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(params)\n    });\n    await fetch(\"http://\" + contact.server + \"/api/transfer\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        from: username,\n        to: contact.id,\n        content: add\n      })\n    });\n    let data = await fetch(\"http://localhost:5108/api/contacts/\" + contact.id + \"/messages?username=\" + username, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    data = await data.json();\n    setListMessages(data);\n  }\n  const sendText = event => {\n    event.preventDefault();\n    if (contact.length === 0 || textInput.current.value.length === 0) {\n      return;\n    }\n    //let newItem = {sender: true, type: \"text\", value: textInput.current.value};\n    sendToServer(textInput.current.value);\n    textInput.current.value = \"\";\n    //       setListMessages(listMessages => [...listMessages, newItem]);\n    //        updateContact(contact, newItem, username);\n  };\n\n  const sendfile = event => {\n    event.preventDefault();\n    if (!isLegalFile(event.target.files[0].type)) {\n      return;\n    }\n    let newItem = {\n      sender: \"client\",\n      type: \"image\",\n      value: URL.createObjectURL(event.target.files[0])\n    };\n    if (isVideo(event.target.files[0].type)) {\n      newItem.type = \"video\";\n      let src = URL.createObjectURL(event.target.files[0]);\n      newItem.value = src;\n    }\n    setListMessages(listMessages => [...listMessages, newItem]);\n    fileInput.current.value = null;\n    //       updateContact(contact, newItem, username);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"send-sec\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-success record-bottom\",\n      type: \"button\",\n      id: \"transparent-btn\"\n      // onClick={() => {\n      //     if (contact.length === 0) {\n      //         return;\n      //     }\n      //     setOpenModel(true) }}\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-mic-fill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), openModel && /*#__PURE__*/_jsxDEV(RecordModal, {\n      closeModel: setOpenModel,\n      contact: contact,\n      setListMessages: setListMessages,\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/* image/*\",\n      ref: fileInput,\n      onChange: sendfile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-success file-bottom\",\n      id: \"transparent-btn\"\n      // onClick={() => {\n      //     if (contact.length === 0) {\n      //         return;\n      //     }\n      //     fileInput.current.click();\n      // }}\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-paperclip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"send-input\",\n      placeholder: \"massage\",\n      ref: textInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-success send-bottom\",\n      id: \"transparent-btn\",\n      type: \"button\",\n      onClick: sendText,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatInput, \"oH8LlKKNVMRXSmlslB4nOzduAe0=\");\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["useRef","useState","RecordModal","jsxDEV","_jsxDEV","isLegalFile","fileType","parts","split","length","isVideo","fileName","ChatInput","_ref","_s","contact","setListMessages","username","fileInput","textInput","openModel","setOpenModel","sendToServer","add","params","content","fetch","id","method","headers","body","JSON","stringify","server","from","to","data","json","sendText","event","preventDefault","current","value","sendfile","target","files","type","newItem","sender","URL","createObjectURL","src","listMessages","className","children","_jsxFileName","lineNumber","columnNumber","closeModel","accept","ref","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/אוראל משען/Desktop/לימודים/chatbot/chat-bot/src/ChatInput.js"],"sourcesContent":["import 'bootstrap-icons/font/bootstrap-icons.css';\r\nimport {useRef, useState} from \"react\";\r\nimport RecordModal from \"./RecordModal\";\r\n\r\nfunction isLegalFile(fileType) {\r\n    let parts = fileType.split('/');\r\n    return parts[parts.length - 2] === \"video\" || parts[parts.length - 2] === \"image\";\r\n}\r\n\r\nfunction isVideo(fileName) {\r\n    let parts = fileName.split('/');\r\n    return parts[parts.length - 2] === \"video\";\r\n}\r\n\r\n\r\n// function updateContact(contact, newMessage, username) {\r\n//     let index = registeredUsers.findIndex((i) => (i.username === username));\r\n//     let contactIndex = registeredUsers[index].data.findIndex((i) => (i.contactName === contact.contactName));\r\n//     registeredUsers[index].data[contactIndex].lastMessageTime = new Date().toLocaleString();\r\n//     registeredUsers[index].data[contactIndex].lastMessage = newMessage;\r\n// }\r\n\r\n\r\nfunction ChatInput({contact, setListMessages, username}) {\r\n    const fileInput = useRef(null)\r\n    const textInput = useRef(null)\r\n    const [openModel, setOpenModel] = useState(false);\r\n\r\n    async function sendToServer(add) {\r\n        const params = {\r\n            content: add\r\n        };\r\n        await fetch(\"http://localhost:5108/api/contacts/\" + contact.id + \"/messages?username=\" + username, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(params)\r\n        });\r\n        await fetch(\"http://\" + contact.server + \"/api/transfer\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                from: username,\r\n                to: contact.id,\r\n                content: add\r\n            })\r\n        })\r\n        let data = await fetch(\"http://localhost:5108/api/contacts/\" + contact.id + \"/messages?username=\" + username, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        data = await data.json();\r\n        setListMessages(data);\r\n    }\r\n\r\n    const sendText = (event) => {\r\n        event.preventDefault();\r\n        if (contact.length === 0 || textInput.current.value.length === 0) {\r\n            return;\r\n        }\r\n        //let newItem = {sender: true, type: \"text\", value: textInput.current.value};\r\n        sendToServer(textInput.current.value);\r\n        textInput.current.value = \"\";\r\n        //       setListMessages(listMessages => [...listMessages, newItem]);\r\n//        updateContact(contact, newItem, username);\r\n    }\r\n\r\n    const sendfile = (event) => {\r\n        event.preventDefault();\r\n        if (!isLegalFile(event.target.files[0].type)) {\r\n            return;\r\n        }\r\n        let newItem = {sender: \"client\", type: \"image\", value: URL.createObjectURL(event.target.files[0])};\r\n        if (isVideo(event.target.files[0].type)) {\r\n            newItem.type = \"video\";\r\n            let src = URL.createObjectURL(event.target.files[0]);\r\n            newItem.value = src;\r\n        }\r\n        setListMessages(listMessages => [...listMessages, newItem]);\r\n        fileInput.current.value = null;\r\n        //       updateContact(contact, newItem, username);\r\n    }\r\n\r\n    return (\r\n        <div className=\"send-sec\">\r\n            <button className=\"btn btn-success record-bottom\" type=\"button\" id=\"transparent-btn\"\r\n                // onClick={() => {\r\n                //     if (contact.length === 0) {\r\n                //         return;\r\n                //     }\r\n                //     setOpenModel(true) }}\r\n            >\r\n                <i className=\"bi bi-mic-fill\"/>\r\n            </button>\r\n            {openModel &&\r\n                <RecordModal closeModel={setOpenModel} contact={contact} setListMessages={setListMessages}\r\n                             username={username}/>}\r\n            <input type=\"file\" accept=\"video/* image/*\" ref={fileInput} onChange={sendfile}/>\r\n            <button className=\"btn btn-success file-bottom\" id=\"transparent-btn\"\r\n                // onClick={() => {\r\n                //     if (contact.length === 0) {\r\n                //         return;\r\n                //     }\r\n                //     fileInput.current.click();\r\n                // }}\r\n            >\r\n                <i className=\"bi bi-paperclip\"/>\r\n            </button>\r\n            <input type=\"text\" className=\"send-input\" placeholder=\"massage\" ref={textInput}/>\r\n            <button className=\"btn btn-success send-bottom\" id=\"transparent-btn\" type=\"button\" onClick={sendText}>\r\n                <i className=\"bi bi-send\"/>\r\n            </button>\r\n\r\n        </div>)\r\n}\r\n\r\nexport default ChatInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}